# -*- coding: utf-8 -*-
"""Talk2Me.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eNickMArk7NTbORbyCcEvcfbyky2j_pg
"""

!pip install discord
!pip install nest_asyncio

import nest_asyncio
nest_asyncio.apply()

import discord

intents = discord.Intents.default()
intents.message_content = True
client = discord.Client(intents=intents)

token = "MTE3MDIyMTg3MzM4OTM5MTkzMg.G--Rv2.HPi0GLt8YcVXMWvCrIvXYM65rSrd1C0UoFgTp4"

connections = {}

@client.event
async def on_ready():
    print(f'We have logged in as {client.user}')


@client.event
async def on_message(message):
    print(connections)
    print(message)
    channel_id = message.channel.id

    if message.author == client.user:
        return
    elif message.content.startswith('$connect'):
        if message.channel.id in connections.keys():
            await message.channel.send("quit current connection before connecting")
        else:
            id2 = int(message.content[9:])
            connections[message.channel.id] = id2
            connections[id2] = message.channel.id
            print(id2)
            channel2 = client.get_channel(id2)
            await message.channel.send("Connection found!")
            await channel2.send("Connection found!")
    elif message.content.startswith('$quit'):
        if message.channel.id in connections.keys():
            id2 = connections[message.channel.id]
            channel2 = client.get_channel(id2)
            await message.channel.send("Connection terminated")
            await channel2.send("Connection terminated")
            del connections[message.channel.id]
            del connections[id2]
        else:
            await message.channel.send("Not currently connected")
    elif message.content.startswith('$announce') and len(message.content) > 30:
        id2 = int(message.content[10:30])
        channel2 = client.get_channel(id2)
        await channel2.send(f"Announcement from {message.author.display_name}: {message.content[30:]}")
    elif message.content.startswith('$info'):
        await message.channel.send(channel_id)
    else:
        ret_channel = client.get_channel(connections[message.channel.id])
        await ret_channel.send(f"{message.author.display_name}: {message.content}")

client.run(token)

# import discord

# intents = discord.Intents.default()
# intents.message_content = True
# client = discord.Client(intents=intents)

# token = "MTE3MDIyMTg3MzM4OTM5MTkzMg.GN6xnH.YOdIhuTh_haE4QQ4oGapAqCkKD1Wim9vFWGaJo"

# @client.event
# async def on_ready():
#     print(f'We have logged in as {client.user}')


# @client.event
# async def on_message(message):
#     if message.author == client.user:
#         return
#     print(message)
#     if message.content.startswith('$speak'):
#         print("hi")
#         await message.channel.send("Hello World!")

# async def hello(ctx):
#     user = ctx.author
#     await ctx.channel.send(f'Hello, {user.mention}!')

#     # if message.content.startswith('$count'):
#     #     inp = message.content[7:]
#     #     for i in range(int(inp)):
#     #         message_content = i+1
#     #         await message.channel.send(message_content)

#     # silly stuff
#     # if message.content.startswith('$simon says'):
#     #     message_content = message.content[10:]
#     #     await message.channel.send(message_content)

#     # if message.content.startswith('$info'):
#     #     await message.channel.send(message.guild)


# client.run(token)


import discord
from discord.ext import commands

# Replace 'YOUR_TOKEN' with your bot's token
TOKEN = 'MTE3MDIyMTg3MzM4OTM5MTkzMg.GN6xnH.YOdIhuTh_haE4QQ4oGapAqCkKD1Wim9vFWGaJo'

intents = discord.Intents.default()
intents.typing = False  # Customize intents as needed
intents.message_content = True

# Replace these with the channel IDs of the source and destination channels
SOURCE_CHANNEL_ID = 1170437713133043764
DESTINATION_CHANNEL_ID = 1170437771199004824

bot = commands.Bot(command_prefix='!', intents = intents)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user.name}')

@bot.event
async def on_message(message):
    print(message.content)
    if message.channel.id == SOURCE_CHANNEL_ID:
        # Get the destination channel by ID
        destination_channel = bot.get_channel(DESTINATION_CHANNEL_ID)

        if destination_channel:
            # Send the message to the destination channel with the sender's name
            await destination_channel.send(f"{message.author.display_name}: {message.content}")

    await bot.process_commands(message)

bot.run(TOKEN)